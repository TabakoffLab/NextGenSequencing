col=grey(c(0:100)*0.001)
n <- length(col)
bx <- par("usr")
n
bx
box.cx <- c(bx[2] + (bx[2] - bx[1]) / 1000,
bx[2] + (bx[2] - bx[1]) / 1000 + (bx[2] - bx[1]) / 50)
box.cy <- c(bx[3], bx[3])
box.sy <- (bx[4] - bx[3]) / n
box.cx
box.cy
box.sy
xx <- rep(box.cx, each = 2)
xx
par(xpd = TRUE)
i=1
yy <- c(box.cy[1] + (box.sy * (i - 1)),
box.cy[1] + (box.sy * (i)),
box.cy[1] + (box.sy * (i - 1)))
polygon(xx, yy, col = col[i], border = col[i])
col[i]
xx
yy
i=100
yy <- c(box.cy[1] + (box.sy * (i - 1)),
box.cy[1] + (box.sy * (i)),
box.cy[1] + (box.sy * (i - 1)))
polygon(xx, yy, col = col[i], border = col[i])
col=grey(c(0:10)*0.01)
opar <- par
n <- length(col)
bx <- par("usr")
box.cx <- c(bx[2] + (bx[2] - bx[1]) / 1000,
bx[2] + (bx[2] - bx[1]) / 1000 + (bx[2] - bx[1]) / 50)
box.cy <- c(bx[3], bx[3])
box.sy <- (bx[4] - bx[3]) / n
xx <- rep(box.cx, each = 2)
par(xpd = TRUE)
i=1
yy <- c(box.cy[1] + (box.sy * (i - 1)),
box.cy[1] + (box.sy * (i)),
box.cy[1] + (box.sy * (i - 1)))
polygon(xx, yy, col = col[i], border = col[i])
xx
yy
yy=c(0,0.1,0.1,0)
polygon(xx, yy, col = col[i], border = col[i])
i=10
polygon(xx, yy, col = col[i], border = col[i])
lut=c(0:10)*0.1
min=0
max=1
ntick=4
ticks=seq(min, max, len=nticks)
nticks=4
ticks=seq(min, max, len=nticks)
scale = (length(lut)-1)/(max-min)
scale
plot(c(0,10), c(min,max), type='n', bty='n', xaxt='n', xlab='', yaxt='n', ylab='', main=title)
dev.new(width=1.75, height=5)
plot(c(0,10), c(min,max), type='n', bty='n', xaxt='n', xlab='', yaxt='n', ylab='', main=title)
axis(2, ticks, las=1)
for (i in 1:(length(lut)-1)) {
plotDendroAndColors(hclust(as.dist(1-corrs),method="average"),colors=grey(abs(present-1)),main=gene,xlab="",sub="",ylab="1 minus Correlation Coefficient",colorHeight=0.1,abHeight=0.6,abCol="black",autoColorHeight=FALSE,groupLabels="")
mtext("Percent Samples\nDetected Above\nBackground\n\n", side=1, at=-0.05,cex=0.7,line=2)
mtext("Percent Samples\nDetected Above\nBackground\n\n", side=1, at=-0.05,cex=0.7,line=5)
par(mar=c(0, 4, 4, 2) + 0.1)
#plot(hclust(as.dist(1-corrs),method="average"),main=gene,xlab="",sub="",ylab="1 minus Correlation Coeffficient")
plotDendroAndColors(hclust(as.dist(1-corrs),method="average"),colors=grey(abs(present-1)),main=gene,xlab="",sub="",ylab="1 minus Correlation Coefficient",colorHeight=0.1,abHeight=0.6,abCol="black",autoColorHeight=FALSE,groupLabels="")
mtext("Percent Samples\nDetected Above\nBackground\n\n", side=1, at=-0.05,cex=0.7,line=5)
library(WGCNA,quietly=TRUE)
dist = hclust(as.dist(1-corrs)
dist = hclust(as.dist(1-corrs),method="average")
dist
clustered = hclust(as.dist(1-corrs),method="average")
plotDendroAndColors(clustered,colors=grey(abs(present-1)),main=gene,xlab="",sub="",ylab="1 minus Correlation Coefficient",colorHeight=0.1,abHeight=0.6,abCol="black",autoColorHeight=FALSE,groupLabels="")
rm(list=ls())
options(stringsAsFactors=FALSE)
library(xtable)
library(WGCNA,quietly=TRUE,verbose=FALSE,warn.conflicts=FALSE)
load("/Volumes/LauraS/Selected.Lines/Data/forIndividualReports.Rdata")
## format p-values
formatP=function(value){
if(value=="<.0001") out="$<$0.0001"
else if(as.numeric(value)<0.0001) out="$<$0.0001"
else if(as.numeric(value)>=0.0001) out=sprintf("%.4f", round(as.numeric(value),4))
return(out)
}
## function for gather relevant results
gatherResults = function(gene){
results = table2[table2$symbol==gene,]
results$symbol.latex = gsub("/"," and ",gsub("_","\\_",results$symbol,fixed=TRUE))
# correlation structure from exon array
if(grepl("XLOC",results$probeset_id)) probeSets = allMask[allMask$transcript_cluster_id.x==results$probeset_id,]
if(grepl("TCONS",results$probeset_id)) probeSets = allMask[allMask$transcript_cluster_id.x==results$gene_id,]
if(nrow(probeSets)>1){
corrs = cor(strainMeans[,as.character(probeSets$probeset_id)])
rownames(corrs)=colnames(corrs)=probeSets$label
}
if(nrow(probeSets)==1) corrs = NA
present = pctPresent[as.character(probeSets$probeset_id)]
if(sum(present>0.05)>1){
presentCorrs = cor(strainMeans[,names(present)[present>0.05]])
rownames(presentCorrs)=colnames(presentCorrs)=probeSets[present>0.05,"label"]
}
if(sum(present>0.05)<2) presentCorrs=NA
names(present) = probeSets$label
#FPKM table
fpkmTable = fpkm[grep(results$gene_id.new,rownames(fpkm)),]
fpkmTable = fpkmTable[order(rownames(fpkmTable)),]
fpkmTable = print(xtable(fpkmTable,align=c("l","c","c")),type="latex",digits=2,comment=FALSE,table.placement="H",caption.placement="top",tabular.environments="c",floating=FALSE)
# analyses where gene/isoform was associated with drinking
analyses = paste(c("gene-level selected lines meta-analysis","gene-level WGCNA","isoform-level selected lines meta-analysis","isoform-level WGCNA")[as.logical(results[c("geneSelectedLines","geneWGCNA","isoformSelectedLines","isoformWGCNA")])],sep="\n")
# summary information about associations and gene/isoform symbols
if(grepl("XLOC",results$probeset_id)) summaryInfo = paste("Association With Alcohol Consumption in:",paste(analyses,collapse="; "),"",paste("Gene ID:",results$gene_id.new,sep=" "),sep="\\newline ")
if(grepl("TCONS",results$probeset_id)) summaryInfo = paste("Association With Alcohol Consumption in:",paste(analyses,collapse="; "),"",paste("Associated Isoform ID:",results$transcript_id.new,sep=" "),paste("Gene ID:",results$gene_id.new,sep=" "),sep="\\newline ")
return(list(results,corrs,fpkmTable,analyses,summaryInfo,present,presentCorrs))
}
## Figure and table captions that are reused for every gene
reconCaption="The Illumina PolyA track displays read coverage when including all aligned reads from the polyA+-selected RNA from all six samples. The Illumina Total track displays read coverage when including all aligned reads from the ribosomal-depleted total RNA from all six samples. The Exon-Exon Junction - polyA+ RNA track indicates the regions of the genome that may be spliced out in the mature mRNA, i.e., exon-exon junction.  The evidence for these splice site is reads where a portion of the read aligns to the area upstream of the junction and another portion of the same read aligns to the area downstream of the junction.  Only reads that matched perfectly to the region surrounding the junction are included in the graphic.  The junction are labeled by their location and the number of reads (including all samples) that cover the junction. The Brain Transcriptome Reconstruction tracks display the isoforms identified in the genome-guided de novo transcriptome reconstruction.  The Brain Transcriptome Reco
nstruction - polyA+ track only contains isoforms from genes that were identified in the polyA+ RNA.  The Brain Transcriptome Reconstruction - not in polyA+ RNA track includes isoforms from genes that were ONLY identified in the ribosomal-depleted total RNA.  The Gene Clusters Identified From Rat Brain Transcriptome Reconstruction track displays the location of the Affymetrix Exon Array probe sets that were included in designating gene clusters.  The probe set labels contains the probe set ID used by Affymetrix followed by the gene identifier generated during the transcriptome reconstruction.  The Isoform Clusters Identified From Rat Brain Transcriptome Reconstruction track displays the location of probe sets that were included in identifying specific isoform clusters.  The probe set labels contains the probe set ID used by Affymetrix followed by the isoform identifier generated during the transcriptome reconstruction.  The remain annotation tracks and the image were generated the UCSC Genome Browser (http:/
/genome.ucsc.edu)."
slCaption="The differences reported for the pairs of selected lines in the table are the differences in mean log base 2 transformed expression values between high and low drinking lines calculated using a mixed linear regression model with a random effect for breeding pair with an adaptive variance structure.  For the HXB/BXH panel, the correlation coefficient for the panel is reported instead of a difference in expression.  The difference in expression in two strains from the RI panel that had a high level of consumption (HXB25) and a low level of alcohol consumption (HXB2) is also reported. In all cases, differences are calculated by subtracting the mean of the low drinking strain/line from the high drinking strain/line, i.e. a positive estimate indicates a positive association between RNA expression and drinking.  P-values have NOT been adjusted for multiple comparisons."
riCaption="The estimates reported are the differences in mean log base 2 transformed expression values between high and low drinking strains.  In all cases, differences are calculated by subtracting the mean of the low drinking strain from the high drinking strain, i.e. a positive estimate indicates a positive association between RNA expression and drinking.  For the comparisons using the exon array, differences were calculated using a two-sample test assuming unequal variances.  For the comparisons using RNA-Seq, differences were calculated from data derived from ribosomal-depleted total RNA samples using the cuffdiff function in the CuffLinks package.  P-values have NOT been adjusted for multiple comparisons. "
seqCaption="Read Fragments Per Kilobase of Transcript Per Million Mapped Reads (FPKM) is reported for each strain and each gene/isoform using read fragments generated from the ribosomal-depleted total RNA.  FPKM values were calculated using the cuffdiff function in the CuffLinks package."
gene="5830418K08Rik"
output=gatherResults(gene)
results=output[[1]]
corrs=output[[2]]
fpkmTable=output[[3]]
analyses=output[[4]]
summaryInfo = output[[5]]
present = output[[6]]
presentCorr = output[[7]]
par(mar=c(0, 4, 4, 2) + 0.1)
clustered = hclust(as.dist(1-corrs),method="average")
plotDendroAndColors(clustered,colors=grey(abs(present-1)),main=gene,xlab="",sub="",ylab="1 minus Correlation Coefficient",colorHeight=0.1,abHeight=0.6,abCol="black",autoColorHeight=FALSE,groupLabels="")
par(mar=c(0, 4, 4, 2) + 0.1)
clustered = hclust(as.dist(1-corrs),method="average")
plotDendroAndColors(clustered,colors=grey(abs(present-1)),main=gene,xlab="",sub="",ylab="1 minus Correlation Coefficient",colorHeight=0.1,abHeight=0.6,abCol="black",autoColorHeight=FALSE,groupLabels="")
cluster.class=rect.hclust(clustered, h=0.6, border="red")
cluster.class
rainbow(2)
rbg(maxColorValue=2)
col4rgb(rainbow(2))
col2rgb(rainbow(2))
rainbow(length(cluster.class))
i=2
cbind(clust.class[[i]], rainbow(length(cluster.class))[[i]])
cbind(cluster.class[[i]], rainbow(length(cluster.class))[[i]])
clustColor = NA
for(i in 1:length(cluster.class)) clustColor = rbind(clustColor,cbind(cluster.class[[i]], rainbow(length(cluster.class))[[i]]))
clustColor
clustColor = c()
for(i in 1:length(cluster.class)) clustColor = rbind(clustColor,cbind(cluster.class[[i]], rainbow(length(cluster.class))[[i]]))
clustColor
for(i in 1:length(cluster.class)) clustColor = rbind(clustColor,data.frame(cbind(cluster.class[[i]], rainbow(length(cluster.class))[[i]])))
clustColor = c()
for(i in 1:length(cluster.class)) clustColor = rbind(clustColor,data.frame(id=cluster.class[[i]], color=rainbow(length(cluster.class))[[i]])))
clustColor = c()
for(i in 1:length(cluster.class)) clustColor = rbind(clustColor,data.frame(id=cluster.class[[i]], color=rainbow(length(cluster.class))[[i]]))
clustColor
clustColor = clustColor[order(clustColor$id),]
clustColor
plotDendroAndColors(clustered,colors=cbind(grey(abs(present-1)),clustColor$color),main=gene,xlab="",sub="",ylab="1 minus Correlation Coefficient",colorHeight=0.1,abHeight=0.6,abCol="black",autoColorHeight=FALSE,groupLabels="")
library(RColorBrewer)
gene="Maats1"
output=gatherResults(gene)
results=output[[1]]
corrs=output[[2]]
fpkmTable=output[[3]]
analyses=output[[4]]
summaryInfo = output[[5]]
present = output[[6]]
presentCorr = output[[7]]
clustered = hclust(as.dist(1-corrs),method="average")
cluster.class=rect.hclust(clustered, h=0.6)
length(cluster.class)
gene="P2rx4"
output=gatherResults(gene)
results=output[[1]]
corrs=output[[2]]
fpkmTable=output[[3]]
analyses=output[[4]]
summaryInfo = output[[5]]
present = output[[6]]
presentCorr = output[[7]]
clustered = hclust(as.dist(1-corrs),method="average")
cluster.class=rect.hclust(clustered, h=0.6)
length(cluster.class)
clustColor = c()
for(i in 1:length(cluster.class)) clustColor = rbind(clustColor,data.frame(id=cluster.class[[i]], color=brewer.pal(length(cluster.class),name="Set3")[[i]]))
clustColor = clustColor[order(clustColor$id),]
plotDendroAndColors(clustered,colors=cbind(grey(abs(present-1)),clustColor$color),main=gene,xlab="",sub="",ylab="1 minus Correlation Coefficient",colorHeight=0.1,abHeight=0.6,abCol="black",autoColorHeight=FALSE,groupLabels="")
clustColor = c()
for(i in 1:length(cluster.class)) clustColor = rbind(clustColor,data.frame(id=cluster.class[[i]], color=brewer.pal(length(cluster.class),name="Paired")[[i]]))
clustColor = clustColor[order(clustColor$id),]
plotDendroAndColors(clustered,colors=cbind(grey(abs(present-1)),clustColor$color),main=gene,xlab="",sub="",ylab="1 minus Correlation Coefficient",colorHeight=0.1,abHeight=0.6,abCol="black",autoColorHeight=FALSE,groupLabels="")
cluster.calss
cluster.class
clustColor = c()
#for(i in 1:length(cluster.class)) clustColor = rbind(clustColor,data.frame(id=cluster.class[[i]], color=brewer.pal(length(cluster.class),name="Paired")[[i]]))
for(i in 1:length(cluster.class)) clustColor = rbind(clustColor,data.frame(id=cluster.class[[i]], color=rainbow(length(cluster.class))[[i]]))
clustColor = clustColor[order(clustColor$id),]
plotDendroAndColors(clustered,colors=cbind(grey(abs(present-1)),clustColor$color),main=gene,xlab="",sub="",ylab="1 minus Correlation Coefficient",colorHeight=0.1,abHeight=0.6,abCol="black",autoColorHeight=FALSE,groupLabels="")
brewer.pal.info
clustColor = c()
#for(i in 1:length(cluster.class)) clustColor = rbind(clustColor,data.frame(id=cluster.class[[i]], color=brewer.pal(length(cluster.class),name="Paired")[[i]]))
for(i in 1:length(cluster.class)) clustColor = rbind(clustColor,data.frame(id=cluster.class[[i]], color=cm.colors(length(cluster.class))[[i]]))
clustColor = clustColor[order(clustColor$id),]
plotDendroAndColors(clustered,colors=cbind(grey(abs(present-1)),clustColor$color),main=gene,xlab="",sub="",ylab="1 minus Correlation Coefficient",colorHeight=0.1,abHeight=0.6,abCol="black",autoColorHeight=FALSE,groupLabels="")
display.brewer.pal(8, "Accent")
display.brewer.pal(8, "Dark2")
display.brewer.pal(8, "Set1")
Sys.sleep(2)
display.brewer.pal(8, "Set1")
plotDendroAndColors(clustered,colors=cbind(grey(abs(present-1)),clustColor$color),main=gene,xlab="",sub="",ylab="1 minus Correlation Coefficient",colorHeight=0.1,abHeight=0.6,abCol="black",autoColorHeight=FALSE,groupLabels="")
par(mar=c(0, 4, 4, 2) + 0.1)
plotDendroAndColors(clustered,colors=cbind(grey(abs(present-1)),clustColor$color),main=gene,xlab="",sub="",ylab="1 minus Correlation Coefficient",colorHeight=0.1,abHeight=0.6,abCol="black",autoColorHeight=FALSE,groupLabels="")
library(WGCNA)
help(userListEnrichment)
load("~/Downloads/WGCNA 2/data/BrainLists.rda")
ls
ls()
head(BrainLists)
dim(BrainLists)
table(BrainLists$Category)
table(BrainLists[,"Category"])
genes = read.table(file="/Volumes/LauraS/BxH.HxB.Rats/Exon.Arrays/Alcohol Consumption/analysis.3Dec13/data/prettyAnnotation.txt",sep="\t",header=TRUE)
genes
BrainLists[BrainLists[,"Gene"] %in% toupper(genes$symbol),]
results = BrainLists[BrainLists[,"Gene"] %in% toupper(genes$symbol),]
results[grep("icroglia",results$Category),]
results = as.data.frame(BrainLists[BrainLists[,"Gene"] %in% toupper(genes$symbol),])
results[grep("icroglia",results$Category),]
results[grep("icrog",results$Category),]
library(seqinr)
spikes = read.fasta(file="/Volumes/LauraS/BxH.HxB.Rats/RNA-Seq/spikeSource/ERCC92.fa",seqtype="DNA",forceDNAtolower=FALSE)
ls(spikes)
spikes[["ERCC-00002"]]
write.fasta(spikes,file.out="/Volumes/LauraS/BxH.HxB.Rats/RNA-Seq/spikeSource/ERCC92.v2.fa")
names(spikes)
write.fasta(spikes,names(spikes),file.out="/Volumes/LauraS/BxH.HxB.Rats/RNA-Seq/spikeSource/ERCC92.v2.fa")
library(WGCNA)
rm(list=ls())
options(stringsAsFactors=FALSE)
setwd("/Volumes/LauraS/LXS/RNA-Seq/totalRNA.24Oct13/")
gtf = read.table(file="reconstruction/transcripts.11Jun14.FINAL.gtf",sep="\t",header=FALSE)
library(isoform)
options(stringsAsFactors=FALSE)
setwd("~/Documents/NextGenSeq/Rat.RI.Brain.totalRNA.batch2/")
trimmed = read.table(file="data/trimmedReadCounts.10Jan15.txt",sep="",header=FALSE)
trimmed
trimmed$file = unlist(lapply(strsplit(trimmed$V1,split="/",fixed=TRUE),function(a) a[6]))
head(trimmed)
trimmed$sample = unlist(lapply(strsplit(trimmed$file,split="_",fixed=TRUE),function(a) paste(a[1],a[2],sep="_")))
trimmed$read = unlist(lapply(strsplit(trimmed$file,split="_",fixed=TRUE),function(a) a[9]))
trimmed$lane = unlist(lapply(strsplit(trimmed$file,split="_",fixed=TRUE),function(a) a[8]))
head(trimmed)
trimmed$sample = unlist(lapply(strsplit(trimmed$file,split="_",fixed=TRUE),function(a) gsub("brain","",paste(a[1],a[2],sep="_"))))
head(trimmed)
trimmed$read = unlist(lapply(strsplit(trimmed$file,split="_",fixed=TRUE),function(a) a[5]))
trimmed$lane = unlist(lapply(strsplit(trimmed$file,split="_",fixed=TRUE),function(a) a[4]))
head(trimmed)
bySample = merge(trimmed[trimmed$read=="R1",c("sample","lane","V2","V3")],trimmed[trimmed$read=="R2",c("sample","lane","V2")],by=c("sample","lane"))
head(bySample)
bySample$numReadFrag = bySample$V3*2
colnames(bySample) = c("sample","lane","avgFragLength.R1","numReads","avgFragLength.R2","numReadFrag")
rawCounts$lane = unlist(lapply(strsplit(rawCounts$file,split="_",fixed=TRUE),function(a) a[8]))
rm(list=ls())
options(stringsAsFactors=FALSE)
setwd("~/Documents/NextGenSeq/Rat.RI.Brain.totalRNA.batch2/")
rawCounts = read.table(file="data/rawReadCounts.25Sep14.txt",sep=" ",header=FALSE,fill=TRUE)
rawCounts$readFrag = as.numeric(rawCounts$V3)
rawCounts$file = unlist(lapply(strsplit(rawCounts$V1,split="/",fixed=TRUE),function(a) a[length(a)]))
rawCounts$strain = unlist(lapply(strsplit(rawCounts$file,split="_",fixed=TRUE),function(a) a[1]))
rawCounts$sampleNum = unlist(lapply(strsplit(rawCounts$file,split="_",fixed=TRUE),function(a) gsub("brain","",a[2])))
rawCounts$sample = paste(rawCounts$strain,rawCounts$sampleNum,sep="_")
readFragments = aggregate(rawCounts$readFrag,by=list(sample=rawCounts$sample),sum)
readFragments$numPairedReads = prettyNum(readFragments$x/2,big.mark=",",scientific=FALSE)
readFragments$numReadFragments = prettyNum(readFragments$x,big.mark=",",scientific=FALSE)
readFragments=readFragments[,colnames(readFragments)!="x"]
forPrint = readFragments[,c("sample","numPairedReads","numReadFragments")]
colnames(forPrint) = c("sample","Number of Paired-End Reads","Number of Read Fragments")
options(stringsAsFactors=FALSE)
setwd("~/Documents/NextGenSeq/Rat.RI.Brain.totalRNA.batch2/")
trimmed = read.table(file="data/trimmedReadCounts.10Jan15.txt",sep="",header=FALSE)
trimmed$file = unlist(lapply(strsplit(trimmed$V1,split="/",fixed=TRUE),function(a) a[6]))
trimmed$sample = unlist(lapply(strsplit(trimmed$file,split="_",fixed=TRUE),function(a) gsub("brain","",paste(a[1],a[2],sep="_"))))
trimmed$read = unlist(lapply(strsplit(trimmed$file,split="_",fixed=TRUE),function(a) a[5]))
trimmed$lane = unlist(lapply(strsplit(trimmed$file,split="_",fixed=TRUE),function(a) a[4]))
bySample = merge(trimmed[trimmed$read=="R1",c("sample","lane","V2","V3")],trimmed[trimmed$read=="R2",c("sample","lane","V2")],by=c("sample","lane"))
bySample$numReadFrag = bySample$V3*2
colnames(bySample) = c("sample","lane","avgFragLength.R1","numReads","avgFragLength.R2","numReadFrag")
rawCounts$lane = unlist(lapply(strsplit(rawCounts$file,split="_",fixed=TRUE),function(a) a[8]))
rawCounts = rawCounts[grep("_R1",rawCounts$file),]
bySample = merge(rawCounts,bySample,by=c("sample","lane"))
bySample$pctReadsAfterTrim = paste(sprintf("%.1f",round(100*bySample$numReads/bySample$readFrag,1)),"%",sep="")
bySample$numPairedReads = bySample$readFrag
bySample$numReadFragments = bySample$readFrag*2
bySample = merge(trimmed[trimmed$read=="R1",c("sample","lane","V2","V3")],trimmed[trimmed$read=="R2",c("sample","lane","V2")],by=c("sample","lane"))
bySample$numReadFrag = bySample$V3*2
colnames(bySample) = c("sample","lane","avgFragLength.R1","numReads","avgFragLength.R2","numReadFrag")
bySample = merge(rawCounts,bySample,by=c("sample","lane"))
head(rawCounts)
trimmed = read.table(file="data/trimmedReadCounts.10Jan15.txt",sep="",header=FALSE)
trimmed$file = unlist(lapply(strsplit(trimmed$V1,split="/",fixed=TRUE),function(a) a[6]))
trimmed$sample = unlist(lapply(strsplit(trimmed$file,split="_",fixed=TRUE),function(a) gsub("brain","",paste(a[1],a[2],sep="_"))))
trimmed$read = unlist(lapply(strsplit(trimmed$file,split="_",fixed=TRUE),function(a) a[5]))
trimmed$lane = unlist(lapply(strsplit(trimmed$file,split="_",fixed=TRUE),function(a) a[4]))
head(trimmed)
bySample = merge(trimmed[trimmed$read=="R1",c("sample","lane","V2","V3")],trimmed[trimmed$read=="R2",c("sample","lane","V2")],by=c("sample","lane"))
bySample$numReadFrag = bySample$V3*2
colnames(bySample) = c("sample","lane","avgFragLength.R1","numReads","avgFragLength.R2","numReadFrag")
head(bySample)
head(rawCounts)
rm(list=ls())
options(stringsAsFactors=FALSE)
setwd("~/Documents/NextGenSeq/Rat.RI.Brain.totalRNA.batch2/")
rawCounts = read.table(file="data/rawReadCounts.25Sep14.txt",sep=" ",header=FALSE,fill=TRUE)
rawCounts$readFrag = as.numeric(rawCounts$V3)
rawCounts$file = unlist(lapply(strsplit(rawCounts$V1,split="/",fixed=TRUE),function(a) a[length(a)]))
rawCounts$strain = unlist(lapply(strsplit(rawCounts$file,split="_",fixed=TRUE),function(a) a[1]))
rawCounts$sampleNum = unlist(lapply(strsplit(rawCounts$file,split="_",fixed=TRUE),function(a) gsub("brain","",a[2])))
rawCounts$sample = paste(rawCounts$strain,rawCounts$sampleNum,sep="_")
head(rawCounts)
rawCounts$lane = unlist(lapply(strsplit(rawCounts$file,split="_",fixed=TRUE),function(a) a[4]))
head(rawCounts)
rm(list=ls())
options(stringsAsFactors=FALSE)
setwd("~/Documents/NextGenSeq/Rat.RI.Brain.totalRNA.batch2/")
rawCounts = read.table(file="data/rawReadCounts.25Sep14.txt",sep=" ",header=FALSE,fill=TRUE)
rawCounts$readFrag = as.numeric(rawCounts$V3)
rawCounts$file = unlist(lapply(strsplit(rawCounts$V1,split="/",fixed=TRUE),function(a) a[length(a)]))
rawCounts$strain = unlist(lapply(strsplit(rawCounts$file,split="_",fixed=TRUE),function(a) a[1]))
rawCounts$sampleNum = unlist(lapply(strsplit(rawCounts$file,split="_",fixed=TRUE),function(a) gsub("brain","",a[2])))
rawCounts$sample = paste(rawCounts$strain,rawCounts$sampleNum,sep="_")
rawCounts$lane = unlist(lapply(strsplit(rawCounts$file,split="_",fixed=TRUE),function(a) a[4]))
rawCounts = rawCounts[grep("_R1",rawCounts$file),]
head(rawCounts)
trimmed = read.table(file="data/trimmedReadCounts.10Jan15.txt",sep="",header=FALSE)
trimmed$file = unlist(lapply(strsplit(trimmed$V1,split="/",fixed=TRUE),function(a) a[6]))
trimmed$sample = unlist(lapply(strsplit(trimmed$file,split="_",fixed=TRUE),function(a) gsub("brain","",paste(a[1],a[2],sep="_"))))
trimmed$read = unlist(lapply(strsplit(trimmed$file,split="_",fixed=TRUE),function(a) a[5]))
trimmed$lane = unlist(lapply(strsplit(trimmed$file,split="_",fixed=TRUE),function(a) a[4]))
bySample = merge(trimmed[trimmed$read=="R1",c("sample","lane","V2","V3")],trimmed[trimmed$read=="R2",c("sample","lane","V2")],by=c("sample","lane"))
bySample$numReadFrag = bySample$V3*2
colnames(bySample) = c("sample","lane","avgFragLength.R1","numReads","avgFragLength.R2","numReadFrag")
bySample = merge(rawCounts,bySample,by=c("sample","lane"))
bySample$pctReadsAfterTrim = paste(sprintf("%.1f",round(100*bySample$numReads/bySample$readFrag,1)),"%",sep="")
bySample$numPairedReads = bySample$readFrag
bySample$numReadFragments = bySample$readFrag*2
head(bySample)
forPrint2 = bySample[,c("sample","lane","numPairedReads","numReadFragments","avgFragLength.R1","avgFragLength.R2","numReadFrag","pctReadsAfterTrim")]
forPrint2$avgFragLength.R1 = sprintf("%.1f",round(forPrint2$avgFragLength.R1,1))
forPrint2$avgFragLength.R2 = sprintf("%.1f",round(forPrint2$avgFragLength.R2,1))
forPrint2$numReadFrag = prettyNum(forPrint2$numReadFrag,big.mark=",",scientific=FALSE)
forPrint2$numPairedReads = prettyNum(forPrint2$numPairedReads,big.mark=",",scientific=FALSE)
forPrint2$numReadFragments = prettyNum(forPrint2$numReadFragments,big.mark=",",scientific=FALSE)
forPrint2
colnames(forPrint2) = c("sample","lane","Number of Paired-End Reads","Number of Read Fragments","Average Read Fragment Length After Trimming (first read fragment)","Average Read Fragment Length After Trimming (second read fragment)","Number of Read Fragments After Trimming","Percent of Read Fragments That Remained After Trimming")
prettyNum(sum(as.numeric(bySample$numReads)),big.mark=",",scientific=FALSE)
prettyNum(sum(bySample$numReadFrag),big.mark=",",scientific=FALSE)
prettyNum(2*mean(bySample$numReads),big.mark=",",scientific=FALSE)
sampleList = unique(forPrint2$sample)
sampleList
sampleList = sampleList[sampleList!="HXB31_1"]
rStats = c()
for(i in sampleList){
x = read.table(file=paste("rRNA.summary.",i,".txt",sep=""),sep="\t",header=FALSE)
sample = i
numReads = as.numeric(gsub(":","",gsub("Input","",x[2,1])))
mappedLeft = as.numeric(gsub(":","",gsub("Mapped","",unlist(lapply(strsplit(x[3,1],split="(",fixed=TRUE),function(a) a[1])))))
mappedRight = as.numeric(gsub(":","",gsub("Mapped ","",unlist(lapply(strsplit(x[7,1],split="(",fixed=TRUE),function(a) a[1])))))
mappedPairs = as.numeric(gsub("Aligned pairs: ","",x[10,1]))
rStats = rbind(rStats,data.frame(sample,numReads,mappedLeft,mappedRight,mappedPairs))
}
rStats$numReadFrag = (rStats$mappedLeft + rStats$mappedRight)
rStats$numDeletedPairedReads = (rStats$mappedLeft + rStats$mappedRight - rStats$mappedPairs)
setwd("~/Documents/NextGenSeq/Rat.RI.Brain.totalRNA.batch2/data")
options(stringsAsFactors=FALSE)
rStats = c()
for(i in sampleList){
x = read.table(file=paste("rRNA.summary.",i,".txt",sep=""),sep="\t",header=FALSE)
sample = i
numReads = as.numeric(gsub(":","",gsub("Input","",x[2,1])))
mappedLeft = as.numeric(gsub(":","",gsub("Mapped","",unlist(lapply(strsplit(x[3,1],split="(",fixed=TRUE),function(a) a[1])))))
mappedRight = as.numeric(gsub(":","",gsub("Mapped ","",unlist(lapply(strsplit(x[7,1],split="(",fixed=TRUE),function(a) a[1])))))
mappedPairs = as.numeric(gsub("Aligned pairs: ","",x[10,1]))
rStats = rbind(rStats,data.frame(sample,numReads,mappedLeft,mappedRight,mappedPairs))
}
rStats$numReadFrag = (rStats$mappedLeft + rStats$mappedRight)
rStats$numDeletedPairedReads = (rStats$mappedLeft + rStats$mappedRight - rStats$mappedPairs)
rStats = rStats[,c("sample","numReads","numReadFrag","mappedPairs","numDeletedPairedReads")]
rTable = data.frame(sample=rStats$sample,numTrimmedReads=prettyNum(rStats$numReads,big.mark=",",scientific=FALSE),numDeleted=prettyNum(rStats$numDeletedPairedReads,big.mark=",",scientific=FALSE),pctRiboReads=as.numeric(rStats$numDeletedPairedReads)/as.numeric(rStats$numReads),numRemaining=prettyNum(rStats$numReads-rStats$numDeletedPairedReads,big.mark=",",scientific=FALSE))
rTable$pctRiboReads = paste(sprintf("%.1f",round(100*rTable$pctRiboReads,1)),"%",sep="")
colnames(rTable) = c("Sample","Number of Paired-End Reads After Trimming","Number of Paired-End Reads with at Least One Fragment Aligned to rRNA","Percent of Paired-End Reads Aligned to rRNA","Number of Paired-End Reads NOT Aligned to rRNA")
rTable
