rm(list=ls())
options(stringsAsFactors=FALSE)
setwd("/Volumes/saba/BxH.HxB.Rats/Exon.Arrays/Alcohol Consumption/analysis.3Dec13")
install.packages("qtl")
library(qtl)
orig <- read.cross(file="data/forAnalysis.week2.rQTL.csv",format="csv")
results <- scanone(orig,method="mr")
set.seed(289374927)
results.perm <- scanone(orig,method="mr",n.perm=1000)
quantile(results.perm,0.37)
rm(list=ls())
options(stringsAsFactors = FALSE)
numElements = 8
elements = c(A:Z)[1:numElements]
elements = c('A':'Z')[1:numElements]
elements = paste("element",1:numElements,sep="")
edges=c()
for(i in 1:(numElements-1)){
for(j in 2:numElements) edges = rbind(edges,data.frame(start = elements[i],stop = elements[j]))
}
edges
edges=c()
for(i in 1:(numElements-1)){
for(j in (i+1):numElements) edges = rbind(edges,data.frame(start = elements[i],stop = elements[j]))
}
edges
write.table(file="/Volumes/saba/P60 Grant App/data/exampleNetwork.edges.txt",sep="\t",row.names=FALSE,col.names = FALSE,quote=FALSE)
write.table(edges,file="/Volumes/saba/P60 Grant App/data/exampleNetwork.edges.txt",sep="\t",row.names=FALSE,col.names = FALSE,quote=FALSE)
library(RColorBrewer)
install.packages("RColorBrewer")
brewer.col("Set1",n=4)
library(RColorBrewer)
brewer.col("Set1",n=4)
brewer.pal("Set1",n=4)
col2rgb(brewer.pal("Set1",n=4))
rm(list=ls())
options(stringsAsFactors = FALSE)
library(qtl)
pheno.folder = "~/Documents/smRNA.LXS/Analysis/phenotypes/"
geno.folder = "/Volumes/saba/LXS/SNPs/"
ST.folder = "/Volumes/saba/LXS/SleepTimeAnalysis/"
stQTL = scanone(orig,method="mr")
stQTL.perms = scanone(orig,method="mr",n.perm=1000)
orig = read.cross(format="tidy",dir=paste(ST.folder,"data",sep=""),genfile="genotype.14Jul15.csv",mapfile="map.14Jul15.csv",phefile="phenotype.14Jul15.csv",na.strings=NA,genotypes=c(1,2,3))
stQTL = scanone(orig,method="mr")
stQTL.perms = scanone(orig,method="mr",n.perm=1000)
head(pheno)
pheno.folder = "~/Documents/smRNA.LXS/Analysis/phenotypes/"
geno.folder = "/Volumes/saba/LXS/SNPs/"
ST.folder = "/Volumes/saba/LXS/SleepTimeAnalysis/"
load(paste(geno.folder,"Data/LXSgeno.mm10.Rdata",sep=""))
colnames(just.geno) = gsub("ILSXISS","LXS",colnames(just.geno))
pheno = read.table(file=paste(pheno.folder,"source/LORR.geneNetwork.txt",sep=""),sep="\t",header=TRUE)
pheno = pheno[pheno$Phenotype %in% colnames(just.geno),]
head(pheno)
pheno = pheno[!is.na(pheno$LORR_2005),]
write.table(pheno$Phenotype,file=paste(ST.folder,"data/listOfStrainsST.14Jul15.txt",sep=""),sep="\t",row.names=FALSE,col.names=FALSE,quote=FALSE)
summary(stQTL,perms=stQTL.perms,pvalues=TRUE)
```{r}
rm(list=ls())
options(stringsAsFactors=FALSE)
exp.folder = "/Volumes/saba/LXS/ensemblGene.mm10/"
## import normalized/batch effects adjusted transcript cluster expression  ##
exprsData <- read.table(paste(exp.folder,"data/Adjusted_rma.summary.txt",sep=""),exprFile,sep="\t",header=TRUE,row.names=1)
exprsData <- read.table(paste(exp.folder,"data/Adjusted_rma.summary.txt",sep=""),sep="\t",header=TRUE,row.names=1)
head(exprsData)
exprsData <- exprsData[,-grep("I",colnames(exprsData))]
exprsData <- exprsData[,-grep("B6",colnames(exprsData))]
exprsData <- exprsData[,-grep("DBA",colnames(exprsData))]
fileName <- colnames(exprsData)
Mouse <- unlist(lapply(strsplit(fileName,split="_",fixed=TRUE),function(a) a[1]))
sampleData <- cbind(fileName,Mouse)
head(sampleData)
fileListing <- read.table("/Volumes/saba/LXS/Source/exonArray.noOutliers.fileListing.21May12.txt",sep="\t",header=TRUE)
sampleData <- merge(sampleData,fileListing,by="Mouse")
head(fileListing)
Mouse <- unlist(lapply(strsplit(fileName,split=".",fixed=TRUE),function(a) a[2]))
sampleData <- cbind(fileName,Mouse)
head(sampleData)
sampleData <- merge(sampleData,fileListing,by="Mouse")
head(sampleData)
sampleData <- sampleData[match(colnames(exprsData),sampleData[,"fileName"]),]
sampleData$origin <- as.numeric(sampleData$BredAt=="UCD") - 0.5
table(colnames(exprsData)==sampleData$fileName)
strainMeans <- apply(exprsData,1,function(a) lm(as.numeric(a) ~ sampleData$Strain-1 )$coefficients)
head(strainMeans)
strainMeans[1:5,1:5]
tail(strainMeans[,1:5])
rownames(strainMeans) <- gsub("sampleData$Strain","",rownames(strainMeans),fixed=TRUE)
rownames(strainMeans) <- gsub("LXS","ILSXISS",rownames(strainMeans))
strainMeans[1:5,1:5]
exprsExport <- cbind(trait=colnames(strainMeans),format(t(strainMeans),nsmall=3,digits=5))
geno <- read.table(file="/Volumes/saba/LXs/ensemblGene.mm10/QTLReaper/LXS.for.eQTL.mm10.txt",sep="\t",header=FALSE,nrows=1,skip=6)
head(geno)
exprsExport[1:5,1:5]
geno <- geno[grep("ILSXISS",geno)]
table(geno==colnames(exprsExport)[-1])
write.table(exprsExport,file="/Volumes/saba/LXs/ensemblGene.mm10/QTLReaper/LXS.ensemblGene.mm10.txt",sep="\t",quote=FALSE,row.names=FALSE,col.names=TRUE)
options(stringsAsFactors=FALSE)
setwd("~/Documents/NextGenSeq/Rat.RI.Brain.totalRNA.batch4/")
trimmed = read.table(file="data/trimmedReadCounts.10Jun15.txt",sep="",header=FALSE)
trimmmed
trimmed
trimmed$file = unlist(lapply(strsplit(trimmed$V1,split="/",fixed=TRUE),function(a) a[6]))
trimmed$sample = unlist(lapply(strsplit(trimmed$file,split="_",fixed=TRUE),function(a) gsub("brain","",paste(a[1],a[2],sep="_"))))
trimmed$read = unlist(lapply(strsplit(trimmed$file,split="_",fixed=TRUE),function(a) a[5]))
trimmed$lane = unlist(lapply(strsplit(trimmed$file,split="_",fixed=TRUE),function(a) a[4]))
trimmed
trimmed$file = unlist(lapply(strsplit(trimmed$V1,split="/",fixed=TRUE),function(a) a[length(a)]))
trimmed$sample = unlist(lapply(strsplit(trimmed$file,split="_",fixed=TRUE),function(a) gsub("brain","",paste(a[1],a[2],sep="_"))))
trimmed$read = unlist(lapply(strsplit(trimmed$file,split="_",fixed=TRUE),function(a) a[5]))
trimmed$lane = unlist(lapply(strsplit(trimmed$file,split="_",fixed=TRUE),function(a) a[4]))
trimmed
trimmed = read.table(file="data/trimmedReadCounts.10Jun15.txt",sep="",header=FALSE)
trimmed$file = unlist(lapply(strsplit(trimmed$V1,split="/",fixed=TRUE),function(a) a[length(a)]))
trimmed$sample = unlist(lapply(strsplit(trimmed$file,split="_",fixed=TRUE),function(a) gsub("brain","",paste(a[1],a[2],sep="_"))))
trimmed$read = unlist(lapply(strsplit(trimmed$file,split="_",fixed=TRUE),function(a) a[6]))
trimmed$lane = unlist(lapply(strsplit(trimmed$file,split="_",fixed=TRUE),function(a) a[5]))
bySample = merge(trimmed[trimmed$read=="R1",c("sample","lane","V2","V3")],trimmed[trimmed$read=="R2",c("sample","lane","V2")],by=c("sample","lane"))
bySample$numReadFrag = bySample$V3*2
colnames(bySample) = c("sample","lane","avgFragLength.R1","numReads","avgFragLength.R2","numReadFrag")
bySample
rawCounts$lane = unlist(lapply(strsplit(rawCounts$file,split="_",fixed=TRUE),function(a) a[4]))
setwd("~/Documents/NextGenSeq/Rat.RI.Brain.totalRNA.batch4/")
rawCounts = read.table(file="data/rawReadCounts.09Jun15.txt",sep=" ",header=FALSE,fill=TRUE)
rawCounts$rawReads = as.numeric(rawCounts$V3)
rawCounts$file = unlist(lapply(strsplit(rawCounts$V1,split="/",fixed=TRUE),function(a) a[length(a)]))
rawCounts$strain = unlist(lapply(strsplit(rawCounts$file,split="_",fixed=TRUE),function(a) a[1]))
rawCounts$sampleNum = unlist(lapply(strsplit(rawCounts$file,split="_",fixed=TRUE),function(a) a[2]))
rawCounts$sample = paste(rawCounts$strain,rawCounts$sampleNum,sep="_")
rawCounts$numPairedReads = prettyNum(rawCounts$rawReads,big.mark=",",scientific=FALSE)
rawCounts$numReadFragments = prettyNum(rawCounts$rawReads*2,big.mark=",",scientific=FALSE)
forPrint = rawCounts[,c("sample","numPairedReads","numReadFragments")]
colnames(forPrint) = c("sample","Number of Paired-End Reads","Number of Read Fragments")
rawCounts$lane = unlist(lapply(strsplit(rawCounts$file,split="_",fixed=TRUE),function(a) a[4]))
rawCounts = rawCounts[grep("_R1",rawCounts$file),]
bySample = merge(rawCounts,bySample,by=c("sample","lane"))
rawCounts
rawCounts$lane = unlist(lapply(strsplit(rawCounts$file,split="_",fixed=TRUE),function(a) a[5]))
rawCounts = rawCounts[grep("_R1",rawCounts$file),]
bySample = merge(trimmed[trimmed$read=="R1",c("sample","lane","V2","V3")],trimmed[trimmed$read=="R2",c("sample","lane","V2")],by=c("sample","lane"))
bySample$numReadFrag = bySample$V3*2
colnames(bySample) = c("sample","lane","avgFragLength.R1","numReads","avgFragLength.R2","numReadFrag")
rawCounts
bySample = merge(rawCounts,bySample,by=c("sample","lane"))
bySample$pctReadsAfterTrim = paste(sprintf("%.1f",round(100*bySample$numReads/bySample$rawReads,1)),"%",sep="")
bySample
bySample$numPairedReads = bySample$rawReads
bySample$numReadFragments = bySample$rawReads*2
forPrint2 = bySample[,c("sample","lane","numPairedReads","numReadFragments","avgFragLength.R1","avgFragLength.R2","numReadFrag","pctReadsAfterTrim")]
forPrint2$avgFragLength.R1 = sprintf("%.1f",round(forPrint2$avgFragLength.R1,1))
forPrint2$avgFragLength.R2 = sprintf("%.1f",round(forPrint2$avgFragLength.R2,1))
forPrint2$numReadFrag = prettyNum(forPrint2$numReadFrag,big.mark=",",scientific=FALSE)
forPrint2$numPairedReads = prettyNum(forPrint2$numPairedReads,big.mark=",",scientific=FALSE)
forPrint2$numReadFragments = prettyNum(forPrint2$numReadFragments,big.mark=",",scientific=FALSE)
colnames(forPrint2) = c("sample","lane","Number of Paired-End Reads","Number of Read Fragments","Average Read Fragment Length After Trimming (first read fragment)","Average Read Fragment Length After Trimming (second read fragment)","Number of Read Fragments After Trimming","Percent of Read Fragments That Remained After Trimming")
forPrint2
setwd("~/Documents/NextGenSeq/Rat.RI.Brain.totalRNA.batch4/data")
options(stringsAsFactors=FALSE)
sampleList = c("BNLx_3","SHR_1","SHR_3")
rStats = c()
for(i in sampleList){
x = read.table(file=paste("rRNA.summary.",i,".txt",sep=""),sep="\t",header=FALSE)
sample = i
numReads = as.numeric(gsub(":","",gsub("Input","",x[2,1])))
mappedLeft = as.numeric(gsub(":","",gsub("Mapped","",unlist(lapply(strsplit(x[3,1],split="(",fixed=TRUE),function(a) a[1])))))
mappedRight = as.numeric(gsub(":","",gsub("Mapped","",unlist(lapply(strsplit(x[7,1],split="(",fixed=TRUE),function(a) a[1])))))
mappedPairs = as.numeric(gsub("Aligned pairs: ","",x[10,1]))
rStats = rbind(rStats,data.frame(sample,numReads,mappedLeft,mappedRight,mappedPairs))
}
rStats$numReadFrag = (rStats$mappedLeft + rStats$mappedRight)
rStats$numDeletedPairedReads = (rStats$mappedLeft + rStats$mappedRight - rStats$mappedPairs)
rStats$sample = gsub(".v1","",rStats$sample)
rStats = rStats[,c("sample","numReads","numReadFrag","mappedPairs","numDeletedPairedReads")]
rTable = data.frame(sample=rStats$sample,numTrimmedReads=prettyNum(rStats$numReads,big.mark=",",scientific=FALSE),numDeleted=prettyNum(rStats$numDeletedPairedReads,big.mark=",",scientific=FALSE),pctRiboReads=as.numeric(rStats$numDeletedPairedReads)/as.numeric(rStats$numReads),numRemaining=prettyNum(rStats$numReads-rStats$numDeletedPairedReads,big.mark=",",scientific=FALSE))
rTable$pctRiboReads = paste(sprintf("%.1f",round(100*rTable$pctRiboReads,1)),"%",sep="")
colnames(rTable) = c("Sample","Number of Paired-End Reads After Trimming","Number of Paired-End Reads with at Least One Fragment Aligned to rRNA","Percent of Paired-End Reads Aligned to rRNA","Number of Paired-End Reads NOT Aligned to rRNA")
rTable
unmappedStats = c()
for(i in sampleList){
x = read.table(file=paste("unmappedFQ.summary.",i,".txt",sep=""),sep=" ",header=FALSE,fill=TRUE)
sample = i
numReads = as.numeric(x[1,3])/4
unmappedStats = rbind(unmappedStats,data.frame(sample,numReads))
}
rownames(unmappedStats) = unmappedStats$sample
unmappedStats
numCorrect = sum(as.numeric(gsub(",","",rTable[,"Number of Paired-End Reads NOT Aligned to rRNA"],fixed=TRUE))==unmappedStats[rTable$Sample,2])
numSamples = nrow(unmappedStats)
numCorrect
numSamples
rm(list=ls())
options(stringsAsFactors=FALSE)
library(knitr)
base.folder = "~/Documents/NextGenSeq/Rat.RI.Liver.totalRNA.batch1/"
rawCounts = read.table(file=paste(base.folder,"data/rawReadCounts.01Jul15.txt",sep=""),sep=" ",header=FALSE,fill=TRUE)
rawCounts
rawCounts$readFrag = as.numeric(rawCounts$V3)
rawCounts$file = unlist(lapply(strsplit(rawCounts$V1,split="/",fixed=TRUE),function(a) a[length(a)]))
rawCounts$strain = unlist(lapply(strsplit(rawCounts$file,split="_",fixed=TRUE),function(a) a[1]))
rawCounts$sampleNum = unlist(lapply(strsplit(rawCounts$file,split="_",fixed=TRUE),function(a) a[2]))
rawCounts$sample = paste(rawCounts$strain,rawCounts$sampleNum,sep="_")
rawCounts
rawCounts = read.table(file=paste(base.folder,"data/rawReadCounts.01Jul15.txt",sep=""),sep=" ",header=FALSE,fill=TRUE)
rawCounts$readFrag = as.numeric(rawCounts$V3)
rawCounts$file = unlist(lapply(strsplit(rawCounts$V1,split="/",fixed=TRUE),function(a) a[length(a)]))
rawCounts$strain = unlist(lapply(strsplit(rawCounts$file,split="_",fixed=TRUE),function(a) a[1]))
rawCounts$sampleNum = unlist(lapply(strsplit(rawCounts$file,split="_",fixed=TRUE),function(a) gsub("liver","",a[2])))
rawCounts$sample = paste(rawCounts$strain,rawCounts$sampleNum,sep="_")
rawCounts
readFragments = aggregate(rawCounts$readFrag,by=list(sample=rawCounts$sample),sum)
readFragments$numPairedReads = prettyNum(readFragments$x/2,big.mark=",",scientific=FALSE)
readFragments$numReadFragments = prettyNum(readFragments$x,big.mark=",",scientific=FALSE)
readFragments=readFragments[,colnames(readFragments)!="x"]
readFragments
readFragments = aggregate(rawCounts$readFrag,by=list(sample=rawCounts$sample),sum)
readFragments$numPairedReads = prettyNum(readFragments$x,big.mark=",",scientific=FALSE)
readFragments$numReadFragments = prettyNum(readFragments$x*2,big.mark=",",scientific=FALSE)
readFragments
readFragments=readFragments[,colnames(readFragments)!="x"]
forPrint = readFragments[,c("sample","numPairedReads","numReadFragments")]
colnames(forPrint) = c("sample","Number of Paired-End Reads","Number of Read Fragments")
forPrint
markers = read.table(file=paste(ST.folder,"markers/LXS.Katerina201507.markerset4analysis.txt",sep=""),sep="\t",header=TRUE)
rm(list=ls())
options(stringsAsFactors = FALSE)
library(qtl)
pheno.folder = "~/Documents/smRNA.LXS/Analysis/phenotypes/"
#geno.folder = "/Volumes/saba/LXS/SNPs/"
ST.folder = "/Volumes/saba/LXS/SleepTimeAnalysis/"
markers = read.table(file=paste(ST.folder,"markers/LXS.Katerina201507.markerset4analysis.txt",sep=""),sep="\t",header=TRUE)
head(markers)
pheno = read.table(file=paste(pheno.folder,"source/LORR.geneNetwork.txt",sep=""),sep="\t",header=TRUE)
pheno = pheno[pheno$Phenotype %in% colnames(just.geno),]
pheno = pheno[!is.na(pheno$LORR_2005),]
pheno = pheno[pheno$Phenotype %in% colnames(markers),]
pheno = read.table(file=paste(pheno.folder,"source/LORR.geneNetwork.txt",sep=""),sep="\t",header=TRUE)
pheno = pheno[pheno$Phenotype %in% colnames(markers),]
colnames(markers)
pheno = read.table(file=paste(pheno.folder,"source/LORR.geneNetwork.txt",sep=""),sep="\t",header=TRUE)
peheno
pheno
colnames(markers) = gsub("ILSXISS","LXS",colnames(markers))
head(markers[,1:5])
pheno = pheno[pheno$Phenotype %in% colnames(markers),]
pheno = pheno[!is.na(pheno$LORR_2005),]
head(pheno)
geno=cbind(SNP=rownames(just.geno),just.geno[,pheno$Phenotype])
head(markers)
geno=cbind(SNP=markers$start.SNP,markers[,pheno$Phenotype])
head(geno)
write.table(geno,file=paste(ST.folder,"data/genotype.16Jul15.csv",sep=""),sep=",",row.names=FALSE,quote=FALSE)
map = cbind(SNP=markers$start.SNP,chr=markers$chr,Mb=markers$Mb)
write.table(map,file=paste(ST.folder,"data/map.14Jul15.csv",sep=""),sep=",",row.names=FALSE,quote=FALSE)
write.table(map,file=paste(ST.folder,"data/map.16Jul15.csv",sep=""),sep=",",row.names=FALSE,quote=FALSE)
write.table(t(pheno),file=paste(ST.folder,"data/phenotype.16Jul15.csv",sep=""),sep=",",col.names=FALSE,row.names=TRUE,quote=FALSE)
orig = read.cross(format="tidy",dir=paste(ST.folder,"data",sep=""),genfile="genotype.16Jul15.csv",mapfile="map.16Jul15.csv",phefile="phenotype.16Jul15.csv",na.strings=NA,genotypes=c(1,2,3))
write.table(geno,file=paste(ST.folder,"data/genotype.16Jul15.csv",sep=""),sep=",",row.names=FALSE,quote=FALSE)
orig = read.cross(format="tidy",dir=paste(ST.folder,"data",sep=""),genfile="genotype.16Jul15.csv",mapfile="map.16Jul15.csv",phefile="phenotype.16Jul15.csv",na.strings=NA,genotypes=c(1,2,3))
orig = read.cross(format="tidy",dir=paste(ST.folder,"data",sep=""),genfile="genotype.16Jul15.csv",mapfile="map.16Jul15.csv",phefile="phenotype.16Jul15.csv",na.strings=NA,genotypes=c('L','H','S'))
stQTL = scanone(orig,method="mr")
stQTL.perms = scanone(orig,method="mr",n.perm=1000)
pheno
orig$pheno
stQTL = scanone(orig,pheno.col=4,method="mr")
plot(stQTL)
stQTL.perms = scanone(orig,pheno.col=4,method="mr",n.perm=1000)
summary(stQTL,perms=stQTL.perms,pvalues=TRUE)
set.seed(28239749)
stQTL.perms = scanone(orig,pheno.col=4,method="mr",n.perm=1000)
summary(stQTL,perms=stQTL.perms,pvalues=TRUE)
results = summary(stQTL,perms=stQTL.perms,pvalues=TRUE)
sig.results = results[results$pval<0.63,]
sig.results
orig$pheno
set.seed(5649)
stQTL.perms = scanone(orig,pheno.col=4,method="mr",n.perm=1000)
results = summary(stQTL,perms=stQTL.perms,pvalues=TRUE)
sig.results = results[results$pval<0.63,]
sig.results
results
bayesint(stQTL,chr=sig.results[1,"chr"],prob=0.95)
bayesint(stQTL,chr=sig.results[1,"chr"],prob=0.90)
int2 = bayesint(stQTL,chr=sig.results[2,"chr"],prob=0.90)
int2
int = data.frame(chr=sig.results[,"chr"],start=c(int1$pos[1],int2$pos[1]),stop=c(int1$pos[3],int2$pos[3]))
int1 = bayesint(stQTL,chr=sig.results[1,"chr"],prob=0.90)
int2 = bayesint(stQTL,chr=sig.results[2,"chr"],prob=0.90)
int = data.frame(chr=sig.results[,"chr"],start=c(int1$pos[1],int2$pos[1]),stop=c(int1$pos[3],int2$pos[3]))
int
sig.results = merge(sig.results,int,by="chr")
sig.results
sprintf("0.1%f",round(forPrint$pos,1))
forPrint = sig.results
sprintf("0.1%f",round(forPrint$pos,1))
sprintf("%.1f",round(forPrint$pos,1))
forPrint$bayesCI = paste(sprintf("%.1f",round(forPrint$start,1))," to ",sprintf("%.1f",round(forPrint$stop,1))," Mb",sep="")
forPrint
forPrint$pval = sprintf("%.3f",round(forPrint$pval,3))
forPrint$lod = sprintf("%.2f",round(forPrint$lod,2))
colnames(forPrint) = c("Chromosome","Peak Position (Mb)","LOD Score","Genome-wide p-value","90% Bayesian Credible Interval")
forPrint = sig.results
forPrint$pos = sprintf("%.1f",round(forPrint$pos,1))
forPrint$bayesCI = paste(sprintf("%.1f",round(forPrint$start,1))," to ",sprintf("%.1f",round(forPrint$stop,1))," Mb",sep="")
forPrint$pval = sprintf("%.3f",round(forPrint$pval,3))
forPrint$lod = sprintf("%.2f",round(forPrint$lod,2))
forPrint = forPrint[,c("chr","pos","lod","pval","bayesCI")]
colnames(forPrint) = c("Chromosome","Peak Position (Mb)","LOD Score","Genome-wide p-value","90% Bayesian Credible Interval")
forPrint
nsamples(orig)
nrow(orig$pheno)
Number of Strain Distribution Patterns (i.e., number of SNPs included): `r nrow(orig$geno)`
nrow(orig$geno)
n.mar(orig)
totmar(orig)
prettyNum(totmar(orig),big.mark=",")
