rm(list=ls())
options(stringsAsFactors=FALSE)
setwd("/Volumes/saba/BxH.HxB.Rats/Exon.Arrays/Alcohol Consumption/analysis.3Dec13")
install.packages("qtl")
library(qtl)
orig <- read.cross(file="data/forAnalysis.week2.rQTL.csv",format="csv")
results <- scanone(orig,method="mr")
set.seed(289374927)
results.perm <- scanone(orig,method="mr",n.perm=1000)
quantile(results.perm,0.37)
rm(list=ls())
options(stringsAsFactors = FALSE)
numElements = 8
elements = c(A:Z)[1:numElements]
elements = c('A':'Z')[1:numElements]
elements = paste("element",1:numElements,sep="")
edges=c()
for(i in 1:(numElements-1)){
for(j in 2:numElements) edges = rbind(edges,data.frame(start = elements[i],stop = elements[j]))
}
edges
edges=c()
for(i in 1:(numElements-1)){
for(j in (i+1):numElements) edges = rbind(edges,data.frame(start = elements[i],stop = elements[j]))
}
edges
write.table(file="/Volumes/saba/P60 Grant App/data/exampleNetwork.edges.txt",sep="\t",row.names=FALSE,col.names = FALSE,quote=FALSE)
write.table(edges,file="/Volumes/saba/P60 Grant App/data/exampleNetwork.edges.txt",sep="\t",row.names=FALSE,col.names = FALSE,quote=FALSE)
library(RColorBrewer)
install.packages("RColorBrewer")
brewer.col("Set1",n=4)
library(RColorBrewer)
brewer.col("Set1",n=4)
brewer.pal("Set1",n=4)
col2rgb(brewer.pal("Set1",n=4))
options(stringsAsFactors=FALSE)
setwd("~/Documents/NextGenSeq/Rat.RI.Liver.totalRNA.batch1/")
trimmed = read.table(file="data/trimmedReadCounts.15Jul15.txt",sep="",header=FALSE)
trimmed
trimmed$file = unlist(lapply(strsplit(trimmed$V1,split="/",fixed=TRUE),function(a) a[length(a)]))
trimmed$sample = unlist(lapply(strsplit(trimmed$file,split="_",fixed=TRUE),function(a) gsub("liver","",paste(a[1],a[2],sep="_"))))
trimmed$read = unlist(lapply(strsplit(trimmed$file,split="_",fixed=TRUE),function(a) a[5]))
trimmed$lane = unlist(lapply(strsplit(trimmed$file,split="_",fixed=TRUE),function(a) a[4]))
trimmed
rm(list=ls())
options(stringsAsFactors=FALSE)
library(knitr)
base.folder = "~/Documents/NextGenSeq/Rat.RI.Liver.totalRNA.batch1/"
rawCounts = read.table(file=paste(base.folder,"data/rawReadCounts.01Jul15.txt",sep=""),sep=" ",header=FALSE,fill=TRUE)
rawCounts$readFrag = as.numeric(rawCounts$V3)
rawCounts$file = unlist(lapply(strsplit(rawCounts$V1,split="/",fixed=TRUE),function(a) a[length(a)]))
rawCounts$strain = unlist(lapply(strsplit(rawCounts$file,split="_",fixed=TRUE),function(a) a[1]))
rawCounts$sampleNum = unlist(lapply(strsplit(rawCounts$file,split="_",fixed=TRUE),function(a) gsub("liver","",a[2])))
rawCounts$sample = paste(rawCounts$strain,rawCounts$sampleNum,sep="_")
readFragments = aggregate(rawCounts$readFrag,by=list(sample=rawCounts$sample),sum)
readFragments$numPairedReads = prettyNum(readFragments$x,big.mark=",",scientific=FALSE)
readFragments$numReadFragments = prettyNum(readFragments$x*2,big.mark=",",scientific=FALSE)
readFragments=readFragments[,colnames(readFragments)!="x"]
forPrint = readFragments[,c("sample","numPairedReads","numReadFragments")]
colnames(forPrint) = c("sample","Number of Paired-End Reads","Number of Read Fragments")
rawCounts
options(stringsAsFactors=FALSE)
setwd("~/Documents/NextGenSeq/Rat.RI.Liver.totalRNA.batch1/")
trimmed = read.table(file="data/trimmedReadCounts.15Jul15.txt",sep="",header=FALSE)
trimmed$file = unlist(lapply(strsplit(trimmed$V1,split="/",fixed=TRUE),function(a) a[length(a)]))
trimmed$sample = unlist(lapply(strsplit(trimmed$file,split="_",fixed=TRUE),function(a) gsub("liver","",paste(a[1],a[2],sep="_"))))
trimmed$read = unlist(lapply(strsplit(trimmed$file,split="_",fixed=TRUE),function(a) a[5]))
trimmed$lane = unlist(lapply(strsplit(trimmed$file,split="_",fixed=TRUE),function(a) a[4]))
bySample = merge(trimmed[trimmed$read=="R1",c("sample","lane","V2","V3")],trimmed[trimmed$read=="R2",c("sample","lane","V2")],by=c("sample","lane"))
bySample$numReadFrag = bySample$V3*2
colnames(bySample) = c("sample","lane","avgFragLength.R1","numReads","avgFragLength.R2","numReadFrag")
bySample
rawCounts$lane = unlist(lapply(strsplit(rawCounts$file,split="_",fixed=TRUE),function(a) a[4]))
rawCounts = rawCounts[grep("_R1",rawCounts$file),]
bySample = merge(rawCounts,bySample,by=c("sample","lane"))
bySample$pctReadsAfterTrim = paste(sprintf("%.1f",round(100*bySample$numReads/bySample$rawReads,1)),"%",sep="")
bySample$numPairedReads = bySample$rawReads
bySample$numReadFragments = bySample$rawReads*2
bySample
head(rawCounts)
bySample$pctReadsAfterTrim = paste(sprintf("%.1f",round(100*bySample$numReads/bySample$readFrag,1)),"%",sep="")
trimmed = read.table(file="data/trimmedReadCounts.15Jul15.txt",sep="",header=FALSE)
trimmed$file = unlist(lapply(strsplit(trimmed$V1,split="/",fixed=TRUE),function(a) a[length(a)]))
trimmed$sample = unlist(lapply(strsplit(trimmed$file,split="_",fixed=TRUE),function(a) gsub("liver","",paste(a[1],a[2],sep="_"))))
trimmed$read = unlist(lapply(strsplit(trimmed$file,split="_",fixed=TRUE),function(a) a[5]))
trimmed$lane = unlist(lapply(strsplit(trimmed$file,split="_",fixed=TRUE),function(a) a[4]))
bySample = merge(trimmed[trimmed$read=="R1",c("sample","lane","V2","V3")],trimmed[trimmed$read=="R2",c("sample","lane","V2")],by=c("sample","lane"))
bySample$numReadFrag = bySample$V3*2
colnames(bySample) = c("sample","lane","avgFragLength.R1","numReads","avgFragLength.R2","numReadFrag")
rawCounts$lane = unlist(lapply(strsplit(rawCounts$file,split="_",fixed=TRUE),function(a) a[4]))
rawCounts = rawCounts[grep("_R1",rawCounts$file),]
bySample = merge(rawCounts,bySample,by=c("sample","lane"))
bySample$pctReadsAfterTrim = paste(sprintf("%.1f",round(100*bySample$numReads/bySample$readFrag,1)),"%",sep="")
bySample$numPairedReads = bySample$numReads
bySample$numReadFragments = bySample$numReadFrag
forPrint2 = bySample[,c("sample","lane","numPairedReads","numReadFragments","avgFragLength.R1","avgFragLength.R2","numReadFrag","pctReadsAfterTrim")]
forPrint2$avgFragLength.R1 = sprintf("%.1f",round(forPrint2$avgFragLength.R1,1))
forPrint2$avgFragLength.R2 = sprintf("%.1f",round(forPrint2$avgFragLength.R2,1))
forPrint2$numReadFrag = prettyNum(forPrint2$numReadFrag,big.mark=",",scientific=FALSE)
forPrint2$numPairedReads = prettyNum(forPrint2$numPairedReads,big.mark=",",scientific=FALSE)
forPrint2$numReadFragments = prettyNum(forPrint2$numReadFragments,big.mark=",",scientific=FALSE)
colnames(forPrint2) = c("sample","lane","Number of Paired-End Reads","Number of Read Fragments","Average Read Fragment Length After Trimming (first read fragment)","Average Read Fragment Length After Trimming (second read fragment)","Number of Read Fragments After Trimming","Percent of Read Fragments That Remained After Trimming")
forPrint2
bySample = merge(trimmed[trimmed$read=="R1",c("sample","lane","V2","V3")],trimmed[trimmed$read=="R2",c("sample","lane","V2")],by=c("sample","lane"))
bySample$numReadFrag = bySample$V3*2
colnames(bySample) = c("sample","lane","avgFragLength.R1","numReads","avgFragLength.R2","numReadFrag")
rawCounts$lane = unlist(lapply(strsplit(rawCounts$file,split="_",fixed=TRUE),function(a) a[4]))
rawCounts = rawCounts[grep("_R1",rawCounts$file),]
bySample = merge(rawCounts,bySample,by=c("sample","lane"))
bySample$pctReadsAfterTrim = paste(sprintf("%.1f",round(100*bySample$numReads/bySample$readFrag,1)),"%",sep="")
bySample$numPairedReads = bySample$readFrag
bySample$numReadFragments = bySample$readFrag*2
forPrint2 = bySample[,c("sample","lane","numPairedReads","numReadFragments","avgFragLength.R1","avgFragLength.R2","numReadFrag","pctReadsAfterTrim")]
forPrint2$avgFragLength.R1 = sprintf("%.1f",round(forPrint2$avgFragLength.R1,1))
forPrint2$avgFragLength.R2 = sprintf("%.1f",round(forPrint2$avgFragLength.R2,1))
forPrint2$numReadFrag = prettyNum(forPrint2$numReadFrag,big.mark=",",scientific=FALSE)
forPrint2$numPairedReads = prettyNum(forPrint2$numPairedReads,big.mark=",",scientific=FALSE)
forPrint2$numReadFragments = prettyNum(forPrint2$numReadFragments,big.mark=",",scientific=FALSE)
colnames(forPrint2) = c("sample","lane","Number of Paired-End Reads","Number of Read Fragments","Average Read Fragment Length After Trimming (first read fragment)","Average Read Fragment Length After Trimming (second read fragment)","Number of Read Fragments After Trimming","Percent of Read Fragments That Remained After Trimming")
forPrint2
prettyNum(sum(as.numeric(bySample$numReads)),big.mark=",",scientific=FALSE)
prettyNum(sum(bySample$numReadFrag),big.mark=",",scientific=FALSE)
sampleList = paste(rep(c("SHR", "BXH12", "HXB13", "HXB17", "HXB2", "HXB25", "HXB27", "HXB7"),each=2),c("_1","_2"),sep="")
sampleList
rStats = c()
for(i in sampleList){
x = read.table(file=paste("rRNA.summary.",i,".txt",sep=""),sep="\t",header=FALSE)
sample = i
numReads = as.numeric(gsub(":","",gsub("Input","",x[2,1])))
mappedLeft = as.numeric(gsub(":","",gsub("Mapped","",unlist(lapply(strsplit(x[3,1],split="(",fixed=TRUE),function(a) a[1])))))
mappedRight = as.numeric(gsub(":","",gsub("Mapped","",unlist(lapply(strsplit(x[7,1],split="(",fixed=TRUE),function(a) a[1])))))
mappedPairs = as.numeric(gsub("Aligned pairs: ","",x[10,1]))
rStats = rbind(rStats,data.frame(sample,numReads,mappedLeft,mappedRight,mappedPairs))
}
data.folder="~/Documents/NextGenSeq/Rat.RI.Brain.totalRNA.batch4/data"
data.folder="~/Documents/NextGenSeq/Rat.RI.Brain.totalRNA.batch4/data"
options(stringsAsFactors=FALSE)
sampleList = paste(rep(c("SHR", "BXH12", "HXB13", "HXB17", "HXB2", "HXB25", "HXB27", "HXB7"),each=2),c("_1","_2"),sep="")
rStats = c()
for(i in sampleList){
x = read.table(file=paste(data.folder,"/rRNA.summary.",i,".txt",sep=""),sep="\t",header=FALSE)
sample = i
numReads = as.numeric(gsub(":","",gsub("Input","",x[2,1])))
mappedLeft = as.numeric(gsub(":","",gsub("Mapped","",unlist(lapply(strsplit(x[3,1],split="(",fixed=TRUE),function(a) a[1])))))
mappedRight = as.numeric(gsub(":","",gsub("Mapped","",unlist(lapply(strsplit(x[7,1],split="(",fixed=TRUE),function(a) a[1])))))
mappedPairs = as.numeric(gsub("Aligned pairs: ","",x[10,1]))
rStats = rbind(rStats,data.frame(sample,numReads,mappedLeft,mappedRight,mappedPairs))
}
data.folder="~/Documents/NextGenSeq/Rat.RI.Liver.totalRNA.batch1/data"
options(stringsAsFactors=FALSE)
sampleList = paste(rep(c("SHR", "BXH12", "HXB13", "HXB17", "HXB2", "HXB25", "HXB27", "HXB7"),each=2),c("_1","_2"),sep="")
rStats = c()
for(i in sampleList){
x = read.table(file=paste(data.folder,"/rRNA.summary.",i,".txt",sep=""),sep="\t",header=FALSE)
sample = i
numReads = as.numeric(gsub(":","",gsub("Input","",x[2,1])))
mappedLeft = as.numeric(gsub(":","",gsub("Mapped","",unlist(lapply(strsplit(x[3,1],split="(",fixed=TRUE),function(a) a[1])))))
mappedRight = as.numeric(gsub(":","",gsub("Mapped","",unlist(lapply(strsplit(x[7,1],split="(",fixed=TRUE),function(a) a[1])))))
mappedPairs = as.numeric(gsub("Aligned pairs: ","",x[10,1]))
rStats = rbind(rStats,data.frame(sample,numReads,mappedLeft,mappedRight,mappedPairs))
}
rStats
rStats$numReadFrag = (rStats$mappedLeft + rStats$mappedRight)
rStats$numDeletedPairedReads = (rStats$mappedLeft + rStats$mappedRight - rStats$mappedPairs)
rStats = rStats[,c("sample","numReads","numReadFrag","mappedPairs","numDeletedPairedReads")]
rTable = data.frame(sample=rStats$sample,numTrimmedReads=prettyNum(rStats$numReads,big.mark=",",scientific=FALSE),numDeleted=prettyNum(rStats$numDeletedPairedReads,big.mark=",",scientific=FALSE),pctRiboReads=as.numeric(rStats$numDeletedPairedReads)/as.numeric(rStats$numReads),numRemaining=prettyNum(rStats$numReads-rStats$numDeletedPairedReads,big.mark=",",scientific=FALSE))
rTable$pctRiboReads = paste(sprintf("%.1f",round(100*rTable$pctRiboReads,1)),"%",sep="")
rTable
rawCounts
rm(list=ls())
options(stringsAsFactors=FALSE)
exp.folder = "/Volumes/saba/LXS/ensemblGene.mm10/"
## import normalized/batch effects adjusted transcript cluster expression  ##
exprsData <- read.table(paste(exp.folder,"data/Adjusted_rma.summary.txt",sep=""),sep="\t",header=TRUE,row.names=1)
exprsData <- exprsData[,-grep("I",colnames(exprsData))]
exprsData <- exprsData[,-grep("B6",colnames(exprsData))]
exprsData <- exprsData[,-grep("DBA",colnames(exprsData))]
fileName <- colnames(exprsData)
Mouse <- unlist(lapply(strsplit(fileName,split=".",fixed=TRUE),function(a) a[2]))
sampleData <- cbind(fileName,Mouse)
fileListing <- read.table("/Volumes/saba/LXS/Source/exonArray.noOutliers.fileListing.21May12.txt",sep="\t",header=TRUE)
sampleData <- merge(sampleData,fileListing,by="Mouse")
sampleData <- sampleData[match(colnames(exprsData),sampleData[,"fileName"]),]
sampleData$origin <- as.numeric(sampleData$BredAt=="UCD") - 0.5
table(colnames(exprsData)==sampleData$fileName)
rsquare <- function(example){
Y = matrix(example,nc=1)
J = matrix(1,nr=length(example),nc=length(example))
n = length(example)
X = as.matrix(model.matrix(~ -1 + factor(strains)))
b = solve(t(X)%*%X)%*%t(X)%*%Y
SSTO <- t(Y)%*%Y - t(Y)%*%J%*%Y / n
SSE = t(Y)%*%Y - t(b)%*%t(X)%*%Y
rSquare = 1 - SSE/SSTO
return(rSquare)
}
strains <- gsub("LXS","ILSXISS",sampleData$Strain)
r.square <- apply(exprsData,1,rsquare)
head(r.square)
numSamples <- table(strains)
numSamples <- numSamples[numSamples!=0]
table(rownames(strainMeans)==names(numSamples))
strainMeans <- apply(exprsData,1,function(a) lm(as.numeric(a) ~ sampleData$Strain-1 )$coefficients)
rownames(strainMeans) <- gsub("sampleData$Strain","",rownames(strainMeans),fixed=TRUE)
rownames(strainMeans) <- gsub("LXS","ILSXISS",rownames(strainMeans))
table(rownames(strainMeans)==names(numSamples))
weights <- apply((1 + matrix(r.square,nc=1) %*% matrix(numSamples-1,nr=1)),1,function(a) a / numSamples)
colnames(weights) <- names(r.square)
table(rownames(strainMeans)==rownames(weights))
weightExport <- cbind(trait=colnames(weights),format(t(weights),nsmall=3,digits=5))
write.table(weightExport,file="/Volumes/saba/LXS/ensemblGene.mm10/QTLReaper/LXS.ensemblGene.mm10.weights.txt",sep="\t",quote=FALSE,row.names=FALSE,col.names=TRUE)
rm(list=ls())
options(stringsAsFactors=FALSE)
done<-read.table(file=paste(exp.folder,"QTLReaper/LXS.ensemblGene.mm10.OneDScan.txt",sep=""),sep="\t",header=TRUE,fill=TRUE)
exp.folder = "/Volumes/saba/LXS/ensemblGene.mm10/"
done<-read.table(file=paste(exp.folder,"QTLReaper/LXS.ensemblGene.mm10.OneDScan.txt",sep=""),sep="\t",header=TRUE,fill=TRUE)
head(done)
table(done$Chr)
sum(done$MaxLODpvalue == 0) / nrow(done)
sum(done$MaxLODpvalue <= 0.10) / nrow(done)
sig.eQTL <- done[done$MaxLODpvalue <= 0.10,c("ProbeID","Chr")]
traits <- read.table(file=paste(exp.folder,"QTLReaper/LXS.ensemblGene.mm10.txt",sep=""),sep="\t",header=TRUE)
reduced.exprs <- merge(sig.eQTL,traits,by.x="ProbeID",by.y="trait")
write.table(reduced.exprs,file=paste(exp.folder,"QTLReaper/LXS.ensemblGene.mm10.forCL.txt",sep=""),sep="\t",row.names=FALSE,quote=FALSE)
weights <- read.table(file=paste(exp.folder,"QTLReaper/LXS.ensemblGene.mm10.weights.txt",sep=""),sep="\t",header=TRUE)
reduced.weights <- merge(sig.eQTL,weights,by.x="ProbeID",by.y="trait")
reduced.weights <- reduced.weights[,-2]
write.table(reduced.weights,file=paste(exp.folder,"QTLReaper/LXS.ensemblGene.mm10.weights.forCL.txt",sep=""),sep="\t",row.names=FALSE,quote=FALSE)
location <- read.table(file="/Volumes/saba/annotation/ensemblGene.locs.GRCm38.p3.28Apr15.txt",sep="\t",header=FALSE)
head(location)
location <- read.table(file="/Volumes/saba/annotation/ensemblGene.locs.GRCm38.p3.28Apr15.txt",sep="\t",header=TRUE)
head(location)
table(location$Chromosome.Name)
location$ProbeSet_Mb <- location$Gene.Start..bp. / 1000000
rm(list=ls())
options(stringsAsFactors=FALSE)
exp.folder = "/Volumes/saba/LXS/ensemblGene.mm10/"
location <- read.table(file="/Volumes/saba/annotation/ensemblGene.locs.GRCm38.p3.28Apr15.txt",sep="\t",header=TRUE)
location$ProbeSet_Chr <- location$Chromosome.Name
location$ProbeSet_Mb <- location$Gene.Start..bp. / 1000000
results <- read.table(file=paste(exp.folder,"QTLReaper/LXS.fullPS.mm10.OneDScan.txt",sep=""),sep="\t",header=TRUE)
results <- read.table(file=paste(exp.folder,"QTLReaper/LXS.ensemblGene.mm10.OneDScan.txt",sep=""),sep="\t",header=TRUE)
head(results)
genotypes <- read.table(file="/Volumes/saba/LXS/ensemblGene.mm10/QTLReaper/LXS.for.eQTL.mm10.txt",sep="\t",header=FALSE,nrows=1,skip=6)
head(genotypes)
genotypes <- read.table(file="/Volumes/saba/LXS/ensemblGene.mm10/QTLReaper/LXS.for.eQTL.mm10.txt",sep="\t",header=TRUE,skip=6)
head(genotypes)
reducedGeno <- genotypes[,c("Locus","Chr","Mb")]
reducedGeno$MaxLOD_Mb = reducedGeno$Mb
colnames(reducedGeno)[colnames(reducedGeno)=="Chr"] = "MaxLOD_Chr"
head(reducedGeno)
reducedGeno = reducedGeno[,-3]
head(reducedGeno)
results <- read.table(file=paste(exp.folder,"QTLReaper/LXS.ensemblGene.mm10.OneDScan.txt",sep=""),sep="\t",header=TRUE)
confLimits <- read.table(file=paste(exp.folder,"QTLReaper/LXS.ensemblGene.mm10.OneDScan.CL.txt",sep=""),sep="\t",header=TRUE,fill=TRUE)
head(confLimits)
formatted <- merge(location,results,by.x="V1",by.y="ProbeID",all.y=TRUE)
head(location)
head(results)
formatted <- merge(location,results,by.x="Ensembl.Gene.ID",by.y="ProbeID",all.y=TRUE)
head(formatted)
colnames(formatted)[colnames(formatted)=="Locus"] = "MaxLOD_Locus"
colnames(formatted)[colnames(formatted)=="MaxLODpvalue"] = "MaxLOD_pvalue"
formatted$MaxLOD = formatted$LRS / (2*log(10))
formatted <- formatted[,c("Ensembl.Gene.ID","ProbeSet_Chr","ProbeSet_Mb","MaxLOD_Locus","MaxLOD","MaxLOD_pvalue")]
head(formatted)
head(reducedGeno)
formatted2 <- merge(formatted,reducedGeno,by.x="MaxLOD_Locus",by.y="Locus")
head(genotypes)
limits <- merge(confLimits,genotypes[,c("Locus","Mb")],by.x="Locus1",by.y="Locus")
limits$Lower_Limit <- limits$Mb
limits <- limits[,c("ProbeID","Lower_Limit","Locus2")]
limits <- merge(limits,genotypes[,c("Locus","Mb")],by.x="Locus2",by.y="Locus")
limits$Upper_Limit <- limits$Mb
head(limits)
limits <- limits[,c("ProbeID","Lower_Limit","Upper_Limit")]
head(formatted2)
formatted3 <- merge(formatted2,limits,by.x="Ensembl.Gene.ID",by.y="ProbeID",all.x=TRUE)
head(formatted3)
formatted3$MaxLOD_FDR <- p.adjust(formatted3$MaxLOD_pvalue,method="BH")
done <- formatted3[,c("Ensembl.Gene.ID","ProbeSet_Chr","ProbeSet_Mb","MaxLOD_Locus","MaxLOD_Chr","MaxLOD_Mb","MaxLOD","MaxLOD_pvalue","MaxLOD_FDR","Lower_Limit","Upper_Limit")]
done$Lower_Limit = formatC(done$Lower_Limit,digits=3,format="f")
done$Upper_Limit = formatC(done$Upper_Limit,digits=3,format="f")
done[done$Lower_Limit=="  NA","Lower_Limit"] = ""
done[done$Upper_Limit=="  NA","Upper_Limit"] = ""
done$MaxLOD_Mb = formatC(done$MaxLOD_Mb,digits=3,format="f")
done$MaxLOD = formatC(done$MaxLOD,digits=2,format="f")
done$MaxLOD_FDR = formatC(done$MaxLOD_FDR,digits=3,format="f")
sum(done$MaxLOD_pvalue[done$Upper_Limit==""]<=0.10)
sum(done$MaxLOD_pvalue[done$Upper_Limit!=""]>0.10)
write.table(done,file=paste(exp.folder,"QTLReaper/LXS.eQTL.ensemblGene.mm10.21Jul15.txt",sep="\t",row.names=FALSE,quote=FALSE,na="")
write.table(done,file=paste(exp.folder,"QTLReaper/LXS.eQTL.ensemblGene.mm10.21Jul15.txt",sep=""),sep="\t",row.names=FALSE,quote=FALSE,na="")
head(done)
tail(done)
